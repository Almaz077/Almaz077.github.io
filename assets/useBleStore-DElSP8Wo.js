import{c as v,v as E}from"./shallow-Bm4ufq9Z.js";const S=v((r,s)=>({offsetsByTypes:{bool:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],int:[16,20,24,28,32,36,40,44,48,52,56,60,64,68,72,76],float:[80,84,88,92,96,100,104,108,112,116,120,124,128,132,136,140],analog:[150,230,310,390,470,550,630,710,790,870,950,1030,1110,1190,1270,1350]},setOffsets(a,e){r({offsetsByTypes:{...s().offsetsByTypes,[e]:[...a]}})}})),T=v((r,s)=>({device:null,characteristics:{},logs:[],temporaryChartData:[],permission:!1,uuids:{serviceUuid1:"00000101-0000-1000-8000-00805f9b34fb",serviceUuid2:"00000115-0000-1000-8000-00805f9b34fb",sendCharacteristicUuid:"00000102-0000-1000-8000-00805f9b34fb",chartCharacteristicUiid:"00000117-0000-1000-8000-00805f9b34fb",modemCharacteristicUuid:"00000104-0000-1000-8000-00805f9b34fb"},chartData:[],devicesChartBuffers:{0:{0:[],1:[],2:[]},1:{0:[],1:[],2:[]},2:{0:[],1:[],2:[]}},lastChartIndex:0,modemParameters:{timestamp:0,timestampSubSeconds:0,latitude:0,longitude:0,altitude:0,is_valid:0,fix:0,gp_sats_in_use:0,gl_sats_in_use:0,bd_sats_in_use:0,gp_sats_in_view:0,gl_sats_in_view:0,bd_sats_in_view:0,ppsFlag:0},clearLogs(){r({logs:[]})},connect:async()=>{const{addLog:a,requestBluetoothDevice:e,connectDeviceAndCacheCharacteristic:i,startNotifications:c}=s();try{await e(),await i(),await c()}catch(t){a(`Error: ${t==null?void 0:t.message}`,"err")}},boundHandleDisconnection:()=>{const{device:a,addLog:e}=s();e(`"${a.name}"  bluetooth device disconnected`)},addLog:(a,e="")=>{const{logs:i}=s(),c={id:E(),message:a,type:e};r({logs:[...i,c]})},requestBluetoothDevice:async()=>{const{addLog:a,boundHandleDisconnection:e,uuids:i}=s();a("Requesting bluetooth device...");const c=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:[i.serviceUuid1,i.serviceUuid2]});a(`${c.name} bluetooth device selected`),c.addEventListener("gattserverdisconnected",e),r({device:c})},connectDeviceAndCacheCharacteristic:async()=>{const{uuids:a,addLog:e,device:i}=s();e("Connecting to GATT server...");const c=await i.gatt.connect();e("GATT server connected, getting services...");const t=await c.getPrimaryService(a.serviceUuid1),o=await c.getPrimaryService(a.serviceUuid2);e("Services founded, getting characteristics...");const d=await t.getCharacteristic(a.sendCharacteristicUuid),n=await t.getCharacteristic(a.modemCharacteristicUuid),u=await o.getCharacteristic(a.chartCharacteristicUiid);e("Characteristics found"),r({characteristics:{sendCharacteristic:d,modemCharacteristic:n,chartCharacteristic:u}})},handleModemParametrsChanged:a=>{const{addLog:e}=s(),i=new Uint8Array(a.target.value.buffer),c=new DataView(i.buffer,i.byteOffset,i.byteLength);let t=0;const o=c.getUint32(t,!0);t+=4;let d=c.getUint32(t,!0);d=d/169356432,t+=4;const u=c.getInt32(t,!0)/65536;t+=4;const l=c.getInt32(t,!0)/65536;t+=4;const f=c.getInt32(t,!0)/65536;t+=4;const m=c.getUint8(t);t+=1;const w=c.getUint8(t);t+=1;const C=c.getUint8(t);t+=1;const _=c.getUint8(t);t+=1;const b=c.getUint8(t);t+=1;const p=c.getUint8(t);t+=1;const y=c.getUint8(t);t+=1;const U=c.getUint8(t);t+=1;const L=c.getUint8(t);t+=1,r({modemParameters:{timestamp:o,timestampSubSeconds:d,latitude:u,longitude:l,altitude:f,is_valid:m,fix:w,gp_sats_in_use:C,gl_sats_in_use:_,bd_sats_in_use:b,gp_sats_in_view:p,gl_sats_in_view:y,bd_sats_in_view:U,ppsFlag:L}}),e("modem parametrs received","in")},handleTerminalChanged:a=>{const{addLog:e}=s(),i=new TextDecoder().decode(a.target.value);console.log(i),e(i,"in")},handleChartChanged:a=>{const e=Array.from(new Uint16Array(a.target.value.buffer));console.log("новый пакет: ",e);const i={0:{0:[],1:[],2:[]},1:{0:[],1:[],2:[]},2:{0:[],1:[],2:[]}},c=3,t=3,o=20,d=t*o;for(let n=0;n<c;n++){const u=n*d;for(let h=0;h<t;h++){const l=u+h*o,g=e.slice(l,l+o);i[n]||(i[n]={}),i[n][h]||(i[n][h]=[]),i[n][h].push(...g)}}r({devicesChartBuffers:i})},startNotifications:async()=>{const{addLog:a,characteristics:{modemCharacteristic:e},handleModemParametrsChanged:i}=s();a("Starting notifications..."),await e.startNotifications(),e.addEventListener("characteristicvaluechanged",i)},chartNotificationStart:async()=>{const{addLog:a,characteristics:{chartCharacteristic:e},handleChartChanged:i}=s();await e.startNotifications(),e.addEventListener("characteristicvaluechanged",i),a("charts notification started")},chartNotificationStop:async()=>{const{addLog:a,characteristics:{chartCharacteristic:e},handleChartChanged:i}=s();await e.stopNotifications(),e.removeEventListener("characteristicvaluechanged",i),a("charts notification stopped")},disconnectFromDevice:()=>{const{addLog:a,device:e,boundHandleDisconnection:i}=s();if(e){if(e.removeEventListener("gattserverdisconnected",i),a(`Disconnecting from "${e.name}" bluetooth device...`),!e.gatt.connected){a(`"${e.name}" bluetooth device is already disconnected`);return}e.gatt.disconnect(),a(`"${e.name}" bluetooth device disconnected`)}},disconnect:()=>{const{disconnectFromDevice:a,characteristics:{chartCharacteristic:e,modemCharacteristic:i},handleChartChanged:c,handleModemParametrsChanged:t}=s();a(),i&&i.removeEventListener("characteristicvaluechanged",t),e&&e.removeEventListener("characteristicvaluechanged",c),r({device:null,characteristics:{}})},send:async a=>{const{characteristics:{sendCharacteristic:e},device:i,addLog:c}=s();try{if(a=String(a||""),!a)throw new Error("нельзя отправить пустые данные");if(!i||!e)throw new Error("необходимо подключиться к устройству");await e.writeValue(new TextEncoder().encode(a)),c(a,"out")}catch(t){c(`Error: ${t.message}`,"err")}},sendConfig:async a=>{const{characteristics:{sendCharacteristic:e},device:i,addLog:c}=s();try{if(!a)throw new Error("нельзя отправить пустые данные");if(!i||!e)throw new Error("необходимо подключиться к устройству");await e.writeValue(new TextEncoder().encode(a)),c("конфигурация была отпралена","out")}catch(t){c(`Error: ${t.message}`,"err")}}}));export{T as a,S as u};
